library IEEE;
use IEEE.std_logic_1164.all;


entity TEMPMUX is

port

( CURRENT_TEMP   : in std_logic_vector (6 downto 0);
  DESIRED_TEMP   : in std_logic_vector (6 downto 0);
  DISPLAY_SELECT : in std_logic;
  COOL           : in std_logic;
  HEAT           : in std_logic;
  A_C_ON         : out std_logic;
  FURNACE_ON     : out std_logic;
  CLK            : in std_logic;
  TEMP_DISPLAY   : out std_logic_vector (6 downto 0);
  FURNACE_HOT    : in std_logic;
  AC_READY       : in std_logic;
  FAN_ON         : out std_logic);

end TEMPMUX;
     
architecture RTL of TEMPMUX is

type STATE_TYPE is (IDLE, COOLON, ACNOWREADY, ACDONE, HEATON, FURNACENOWHOT, FURNACECOOL);
signal state, next_state : STATE_TYPE; 	
signal CURRENT_TEMP_1    : std_logic_vector(6 downto 0);
signal DESIRED_TEMP_1    : std_logic_vector(6 downto 0);
signal DISPLAY_SELECT_1  : std_logic;
signal COOL_1            : std_logic;
signal HEAT_1            : std_logic;
signal FURNACE_HOT_1     : std_logic;
signal AC_READY_1        : std_logic;

begin
process (CLK)
begin
  
  if CLK'event and CLK ='1' then
    CURRENT_TEMP_1 <= CURRENT_TEMP;
    DESIRED_TEMP_1 <= DESIRED_TEMP;
    DISPLAY_SELECT_1 <= DISPLAY_SELECT;
    HEAT_1 <= HEAT;		
    COOL_1 <= COOL;
    FURNACE_HOT_1 <= FURNACE_HOT;
    AC_READY_1 <= AC_READY;
 
end if;
end process;

process (CLK)
  begin
    if CLK'event and CLK ='1' then
       if DISPLAY_SELECT = '1' then 
          TEMP_DISPLAY <= CURRENT_TEMP_1;
       else
          TEMP_DISPLAY <= DESIRED_TEMP_1; 
       end if;
    end if;
end process;



process(clk)
begin
  if clk'event and clk='1' then
    state <= next_state;
  end if;
end process;
    


process (state, HEAT_1, COOL_1, DESIRED_TEMP_1, CURRENT_TEMP_1, AC_READY_1, FURNACE_HOT_1)

begin
case state is
when IDLE =>
    if CURRENT_TEMP_1 < DESIRED_TEMP_1 and HEAT_1 = '1' then
      next_state <= HEATON;
    elsif CURRENT_TEMP_1 > DESIRED_TEMP_1 and COOL_1 ='1' then 
      next_state <= COOLON;
    else 
      next_state <= IDLE;
    end if;
--------------------------------------------
when HEATON =>
     if FURNACE_HOT_1 ='1' then 
       next_state <= FURNACENOWHOT;
     else 
       next_state <= HEATON;
     end if;
---------------------------------------------
when FURNACENOWHOT =>
     if not (CURRENT_TEMP_1 < DESIRED_TEMP_1 and HEAT_1 = '1') then
       next_state <= FURNACECOOL;
     else 
       next_state <= FURNACENOWHOT;
     end if;
---------------------------------------------
when FURNACECOOL =>
     if FURNACE_HOT_1 ='0' then
       next_state <= IDLE;
     else 
       next_state <= FURNACENOWHOT;
     end if;
----------------------------------------------
when COOLON =>
      if AC_READY_1 = '1' then 
       next_state <= ACNOWREADY;
      else 
       next_state <= COOLON;
      end if;
----------------------------------------------
when ACNOWREADY =>
      if not (CURRENT_TEMP_1 > DESIRED_TEMP_1 and COOL_1 ='1') then
       next_state <= ACDONE;
      else 
       next_state <= ACNOWREADY;
      end if;
----------------------------------------------
when ACDONE => 
      if AC_READY_1 = '0' then 
       next_state <= IDLE;
      else  
       next_state <= ACDONE;
      end if;
when others => 
       next_state <= IDLE;
end case;
end process;



process (CLK)
begin
  if CLK'event and CLK ='1' then
    if next_state = HEATON or next_state = FURNACENOWHOT then
      FURNACE_ON <= '1';
    else
      FURNACE_ON <= '0';
    end if;
    if next_state = COOLON or next_state = ACNOWREADY then
      A_C_ON <= '1';
    else
      A_C_ON <= '0';
    end if;
    if next_state = FURNACENOWHOT or next_state = ACNOWREADY or 
       next_state = FURNACECOOL   or next_state = ACDONE then
         FAN_ON <= '0';
     else
         FAN_ON <= '1';
    end if;
  end if;
end process;

 end rtl;



TEST BENCH


library IEEE;
use IEEE.std_logic_1164.all;

entity T_TEMPMUX is

end T_TEMPMUX;


architecture RTL of T_TEMPMUX is

component TEMPMUX

port
 ( CURRENT_TEMP   : in std_logic_vector (6 downto 0);
  DESIRED_TEMP   : in std_logic_vector (6 downto 0);
  DISPLAY_SELECT : in std_logic;
  COOL           : in std_logic;
  HEAT           : in std_logic;
  A_C_ON         : out std_logic;
  FURNACE_ON     : out std_logic;
  CLK            : in std_logic;
  TEMP_DISPLAY   : out std_logic_vector (6 downto 0);
  FURNACE_HOT    : in std_logic;
  AC_READY       : in std_logic;
  FAN_ON         : out std_logic);

end component;

signal CURRENT_TEMP, DESIRED_TEMP, TEMP_DISPLAY                                      : std_logic_vector (6 downto 0);   
signal DISPLAY_SELECT, HEAT, COOL, A_C_ON, FURNACE_ON, FURNACE_HOT, AC_READY, FAN_ON : std_logic;
signal CLK : std_logic := '0';


begin

CLK <= not CLK after 5 ns;

UUT: TEMPMUX  port map   (  CLK => CLK,

                           CURRENT_TEMP => CURRENT_TEMP,

                           DESIRED_TEMP => DESIRED_TEMP,

                           DISPLAY_SELECT => DISPLAY_SELECT,

                           TEMP_DISPLAY => TEMP_DISPLAY,

                           HEAT => HEAT,

                           COOL => COOL,
 
                           A_C_ON => A_C_ON,

                           FURNACE_ON => FURNACE_ON,

                           AC_READY => AC_READY,
        
                           FURNACE_HOT => FURNACE_HOT,

                           FAN_ON => FAN_ON);

process
begin

CURRENT_TEMP <= "0000000";
DESIRED_TEMP <= "1111111";
FURNACE_HOT <= '0';
AC_READY <= '0';
HEAT <= '0';
COOL <= '0';
DISPLAY_SELECT <= '0';
wait for 10 ns;
DISPLAY_SELECT <= '1';
wait for 10 ns;
HEAT <= '1';
wait until FURNACE_HOT = '1' ;
FURNACE_HOT <= '1';
wait until FAN_ON = '1';
HEAT <= '0';
wait until FURNACE_HOT = '0';
FURNACE_HOT <= '0';
wait for 10 ns;
HEAT <= '0';
wait for 10 ns;
CURRENT_TEMP <= "1000000";
DESIRED_TEMP <= "0100000";
wait for 10 ns;
COOL <= '1';
wait until A_C_ON = '1';
AC_READY <= '1';
wait until FAN_ON ='1';
COOL <= '0';
AC_READY <= '0';
wait for 10 ns;
COOL <= '0';
wait for 10 ns;
wait;
end process;
end RTL;
